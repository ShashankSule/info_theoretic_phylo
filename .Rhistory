library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
#library("phyloch")
library("seqinr")
source("utilities.R")
library("ggplot2")
library("TreeTools")
library("phyclust")
sequence <- ReadCharacters("coiii.nex")
rownames(sequence) <- names(as.DNAbin(read.nexus.data("coiii.nex")))
plot(read.tree(text = paste(agg_clustering(sequence), ";", sep="")))
source("utilities.R")
plot(read.tree(text = paste(agg_clustering(sequence), ";", sep="")))
trr <- rtreeshape(1,9,model = "yule")
plot(as.phylo(trr[[1]]))
trr_sequence <- as.character(simSeq(as.phylo(trr[[1]]),l=1000, type = "DNA"))
image(as.DNAbin.character(trr_sequence))
D <- dist.dna(as.DNAbin.character(trr_sequence), model = "TN93")
trr <- rtreeshape(1,9,model = "yule")
plot(as.phylo(trr[[1]]))
trr_sequence <- as.character(simSeq(as.phylo(trr[[1]]),l=1000, type = "DNA"))
image(as.DNAbin.character(trr_sequence))
div_tree <- infotree(trr_sequence)
agg_tree <- agg_clustering(trr_sequence)
agg_tree <- agg_clustering(trr_sequence)
rownames(trr_sequence)
forests <- make_newick(rownames(sequence))
x_names <- read.tree(text = paste(forests[1], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[2], ";", sep = ""))$tip.label
max_dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
x_names <- read.tree(text = paste(forests[1], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[2], ";", sep = ""))$tip.label
print(x_names)
print(y_names)
max_dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
max_pair <- c(1, 2)
#Subroutine for computing the closest two clusters
for (k in 1:(length(forests) - 1)) {
for (j in (k + 1):length(forests)) {
x_names <- read.tree(text = paste(forests[k], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[j], ";", sep = ""))$tip.label
dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
cat("Current pair: ",
x_names,
"/",
y_names,
"; affinity =",
dist,
"\n")
if (dist < max_dist) {
max_dist <- dist
max_pair <- c(k, j)
}
}
}
#Just some diagnostics
#Subroutine for joining the two forests
new_branch <-
paste("(", forests[max_pair[1]], ",", forests[max_pair[2]], ")", sep =
"")
forests <- forests[-max_pair]
forests <- c(forests, new_branch)
forests
plot(read.tree(text = paste(agg_clustering(sequence), ";", sep="")))
agg_tree <- agg_clustering(trr_sequence)
sequence <- trr_sequence
x_names <- read.tree(text = paste(forests[1], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[2], ";", sep = ""))$tip.label
print(x_names)
print(y_names)
max_dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
max_pair <- c(1, 2)
#Subroutine for computing the closest two clusters
for (k in 1:(length(forests) - 1)) {
for (j in (k + 1):length(forests)) {
x_names <- read.tree(text = paste(forests[k], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[j], ";", sep = ""))$tip.label
dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
cat("Current pair: ",
x_names,
"/",
y_names,
"; affinity =",
dist,
"\n")
if (dist < max_dist) {
max_dist <- dist
max_pair <- c(k, j)
}
}
}
x_names <- read.tree(text = paste(forests[1], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[2], ";", sep = ""))$tip.label
print(x_names)
print(y_names)
max_dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
max_pair <- c(1, 2)
forests <- make_newick(rownames(sequence))
x_names <- read.tree(text = paste(forests[1], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[2], ";", sep = ""))$tip.label
max_dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
rownames(sequence)
read.tree(text = paste(forests[1], ";", sep = ""))
forests[1]
read.tree(text = "(tip 1);")
?read.tree
read.tree(text = "(tip 1);", comment.char = " ")
paste("tip", 1:9, sep = "")
?rtreeshape
trr[[1]]
names(trr)
trr$names
trr[[1]]$names
trr <- rtreeshape(1,9,model = "yule")
trr[[1]]$names <- paste("tip", 1:9, sep = "")
plot(as.phylo(trr[[1]]))
trr_sequence <- as.character(simSeq(as.phylo(trr[[1]]),l=1000, type = "DNA"))
image(as.DNAbin.character(trr_sequence))
div_tree <- infotree(trr_sequence)
agg_tree <- agg_clustering(trr_sequence)
plot(trr[[1]])
title("Original")
trr <- rtreeshape(1,9,model = "yule")
trr[[1]]$names <- paste("tip", 1:9, sep = "")
plot(as.phylo(trr[[1]]))
trr_sequence <- as.character(simSeq(as.phylo(trr[[1]]),l=1000, type = "DNA"))
image(as.DNAbin.character(trr_sequence))
div_tree <- infotree(trr_sequence)
agg_tree <- agg_clustering(trr_sequence)
plot(as.phylo(trr[[1]]))
title("Original")
plot(trr[[1]])
title("Original")
plot(trr[[1]])
title("Original")
layout(matrix(c(1,2), 1, 2))
plot(read.tree(text = paste(div_tree, ";", sep = "")))
title("Divisive tree")
plot(read.tree(text = paste(agg_tree, ";", sep = "")))
title("Agglomerative tree")
plot(trr[[1]])
title("Original")
layout(matrix(c(1,2), 1, 2))
plot(read.tree(text = paste(div_tree, ";", sep = "")))
title("Divisive tree")
plot(read.tree(text = paste(agg_tree, ";", sep = "")))
title("Agglomerative tree")
layout(matrix(c(1,2), 1, 2))
plot(read.tree(text = paste(div_tree, ";", sep = "")))
title("Divisive tree")
plot(read.tree(text = paste(agg_tree, ";", sep = "")))
title("Agglomerative tree")
library("adegenet")
library("ape")
library("apTreeshape")
library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
library("adegenet")
library("ape")
library("apTreeshape")
library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
#library("phyloch")
library("seqinr")
source("utilities.R")
library("ggplot2")
library("TreeDist")
library("phyclust")
sequence <- ReadCharacters("coiii.nex")
library("adegenet")
library("ape")
library("apTreeshape")
library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
#library("phyloch")
library("seqinr")
source("utilities.R")
library("ggplot2")
library("TreeDist")
library("phyclust")
library("adegenet")
library("ape")
library("apTreeshape")
library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
#library("phyloch")
library("seqinr")
source("utilities.R")
library("ggplot2")
library("TreeDist")
library("TreeTools")
library("phyclust")
sequence <- ReadCharacters("coiii.nex")
rownames(sequence) <- names(as.DNAbin(read.nexus.data("coiii.nex")))
trials <- as.DNAbin.character(sequence, all = TRUE)
M <- dist.dna(trials)
plot(upgma(M))
plot(nj(M))
plot(upgma(M)) axisPhylo()
plot(upgma(M)); axisPhylo()
plot(nj(M)); axisPhylo()
library("adegenet")
library("ape")
library("apTreeshape")
library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
#library("phyloch")
library("seqinr")
source("utilities.R")
library("ggplot2")
library("phyclust")
library("TreeDist")
library("TreeTools")
library("dplyr")
trees <- list()
sequences <- list()
for(i in 1:100){
who_dat(seqs = 12,
sites = 1000,
model = 6,
parameters = "5 5",
gamma = "0.5 4",
equilibrium = "0.25 0.28 0.34 0.13")
system("paml4.8/src/evolverRandomTree 5 paml4.8/MCbaseRTree.dat")
trees[[i]] <- write.tree(read.nexus("mctrees.nex"))
sequences[[i]] <- ReadCharacters("mc.nex")
}
#trials <- c(1:100)
divisive <- lapply(lapply(sequences, infotree), function(x) paste(x,";", sep = ""))
divisive <- lapply(lapply(sequences, infotree), function(x) paste(x,";", sep = ""))
infotree(sequences[[1]])
trees <- list()
sequences <- list()
for(i in 1:100){
who_dat(seqs = 10,
sites = 1000,
model = 6,
parameters = "5 5",
gamma = "0.5 4",
equilibrium = "0.25 0.28 0.34 0.13")
system("paml4.8/src/evolverRandomTree 5 paml4.8/MCbaseRTree.dat")
trees[[i]] <- write.tree(read.nexus("mctrees.nex"))
sequences[[i]] <- ReadCharacters("mc.nex")
}
#trials <- c(1:100)
start <- system.time()
Sys.time()
Sys.time()
start <- Sys.time()
finish <- Sys.time()
finish - start
class(finish - start)
print(finish - start)
#trials <- c(1:100)
start <- Sys.time()
divisive <- lapply(lapply(sequences, infotree), function(x) paste(x,";", sep = ""))
finish <- Sys.time()
print(finish - start)
for(i in 1:100){ write.nexus.data(sequences[[i]], file = paste("TN93_100/16_Jul7_",i,".nex", sep = ""))}
write.nexus.data(sequences[[i]], file = "juju.nex")
getwd()
setwd("/Users/shashanksule/Documents/info_theoretic_phylo/")
system("mkdir TN93_Jul7")
system("ls")
setwd("/Users/shashanksule/Documents/info_theoretic_phylo/TN93_Jul7/")
for(i in 1:100){ write.nexus.data(sequences[[i]],
file = paste("TN93_100/16_Jul7_",i,".nex", sep = ""))}
for(i in 1:100){ write.nexus.data(sequences[[i]],
file = paste("100/16",i,".nex", sep = ""))}
write.nexus.data(sequences[[1]], file = "100/16_1")
?write.nexus.data()
write.nexus.data(sequences[[1]], file = "100/16_1.nex")
write.nexus.data(sequences[[1]], file = "100_16_1.nex")
for(i in 1:100){ write.nexus.data(sequences[[i]],
file = paste("100_16_",i,".nex", sep = ""))}
agglomerative <- lapply(lapply(sequences, agg_clustering), function(x) paste(x,";", sep = ""))
divisive <- lapply(divisive, function(x) paste(x, ";", sep = ""))
View(divisive)
divisive[[1]]
?lapply()
lapply(divisive, function(x) substr(x, 1, nchar(x) - 1)))
lapply(divisive, function(x) substr(x, 1, nchar(x) - 1))
paste("A", 1:6, sep = "")
lapply(function(x,y){write(x,file = y)}, divisive, paste("TN93_Jul7/100_16", 1:100, ".txt", sep = ""))
mapply(function(x,y){write(x,file = y)}, divisive, paste("TN93_Jul7/100_16", 1:100, ".txt", sep = ""))
getwd()
for(i in 1:100){write(divisive[[i]], file = paste("100_16_",i,".txt",sep = ""))}
# start <- Sys.time()
# agglomerative <- lapply(lapply(sequences, agg_clustering), function(x) paste(x,";", sep = ""))
# finish <- Sys.time()
agglomerative <- list(100)
pb = txtProgressBar(min = 0, max = 100, initial = 0)
for(i in 1:100){
agglomerative[[i]] <- paste(agg_clustering(sequences[[i]]), ";", sep = "");
print(paste("Current iterate:", i))
}
# start <- Sys.time()
# agglomerative <- lapply(lapply(sequences, agg_clustering), function(x) paste(x,";", sep = ""))
# finish <- Sys.time()
agglomerative <- list(100)
pb = txtProgressBar(min = 0, max = 100, initial = 0)
for(i in 1:100){
agglomerative[[i]] <- invisible(paste(agg_clustering(sequences[[i]]), ";", sep = ""))
setTxtProgressBar(pb,i)
}
source("utilities.R")
# start <- Sys.time()
# agglomerative <- lapply(lapply(sequences, agg_clustering), function(x) paste(x,";", sep = ""))
# finish <- Sys.time()
agglomerative <- list(100)
pb = txtProgressBar(min = 0, max = 100, initial = 0)
for(i in 1:100){
agglomerative[[i]] <- invisible(paste(agg_clustering(sequences[[i]]), ";", sep = ""))
setTxtProgressBar(pb,i)
}
}
View(agglomerative)
nj_trees <- sequences %>%
lapply(as.DNAbin) %>%
lapply(dist.dna) %>%
lapply(nj) %>%
lapply(write.tree)
data <- data.frame(as.character(trees), as.character(divisive), as.character(agglomerative),
as.character(nj_trees))
div_distance  <- mapply(RobinsonFoulds,
lapply(data$as.character.trees., function(x) read.tree(text = as.character(x))),
lapply(data$as.character.divisive., function(x) read.tree(text = as.character(x))))
View(data)
div_distance  <- mapply(RobinsonFoulds,
lapply(data$as.character.trees., function(x) read.tree(text = as.character(x))),
lapply(data$as.character.divisive., function(x) read.tree(text = as.character(x))))
source("utilities.R")
View(divisive)
divisive[[1]]
class(divisive[[1]])
for(i in 1:100){ divisive[[i]] <- substr(divisive[[i]], 1, nchar(divisive[[i]])-1)}
divisive
View(agglomerative)
data <- data.frame(as.character(trees), as.character(divisive), as.character(agglomerative),
as.character(nj_trees))
div_distance  <- mapply(RobinsonFoulds,
lapply(data$as.character.trees., function(x) read.tree(text = as.character(x))),
lapply(data$as.character.divisive., function(x) read.tree(text = as.character(x))))
agg_distance <- mapply(RobinsonFoulds,
lapply(data$as.character.trees., function(x) read.tree(text = as.character(x))),
lapply(data$as.character.agglomerative., function(x) read.tree(text = as.character(x))))
nj_distance <- mapply(RobinsonFoulds,
lapply(data$as.character.trees., function(x) read.tree(text = as.character(x))),
lapply(data$as.character.nj_trees., function(x) read.tree(text = as.character(x))))
diagnostics <- data.frame(as.character(div_distance),
as.character(agg_distance),
as.character(nj_distance))
div_mean <- diagnostics$as.character.div_distance. %>%
as.character() %>%
as.numeric() %>%
mean()
agg_mean <- diagnostics$as.character.agg_distance. %>%
as.character() %>%
as.numeric() %>%
mean()
nj_mean <-  diagnostics$as.character.nj_distance. %>%
as.character() %>%
as.numeric() %>%
mean()
print(paste("Mean distance of divisive trees from original: ", div_mean, sep = ""))
print(paste("Mean distance of agglomerative trees from original: ", agg_mean, sep = ""))
print(paste("Mean distance of NJ trees from original: ", nj_mean, sep = ""))
metricity <- data
metricity[] <- metricity %>%
lapply(function(x) is.ultrametric(read.tree(text = as.character(x))))
metricity <- data[,c(1,2,4)]
metricity[] <- metricity %>%
lapply(function(x) is.ultrametric(read.tree(text = as.character(x))))
summary(metricity)
low_metricity <- data
low_metricity[] <- low_metricity %>%
lapply(function(x) is.ultrametric(read.tree(text = as.character(x)), tol = 1e-2))
low_metricity <- data[,c(1,2,4)]
low_metricity[] <- low_metricity %>%
lapply(function(x) is.ultrametric(read.tree(text = as.character(x)), tol = 1e-2))
summary(low_metricity)
print("Tolerance used: 1e-2")
rel_distances <- list(99)
for(i in 1:99){
rel_distances <- RobinsonFoulds(read.tree(text = trees[[i]]), read.tree(text = trees[[i+1]]))
}
summary(rel_distances)
trees
RobinsonFoulds(read.tree(text = trees[[1]]), read.tree(text = trees[[2]]))
RobinsonFoulds(read.tree(text = trees[[2]]), read.tree(text = trees[[3]]))
RobinsonFoulds(read.tree(text = trees[[3]]), read.tree(text = trees[[4]]))
RobinsonFoulds(read.tree(text = trees[[4]]), read.tree(text = trees[[5]]))
RobinsonFoulds(read.tree(text = trees[[3]]), read.tree(text = trees[[5]]))
RobinsonFoulds(read.tree(text = trees[[2]]), read.tree(text = trees[[6]]))
RobinsonFoulds(read.tree(text = trees[[1]]), read.tree(text = trees[[6]]))
summary(rel_distances)
plot(read.tree(text = trees[[1]]))
plot(read.tree(text = trees[[2]]))
plot(read.tree(text = trees[[3]]))
plot(read.tree(text = trees[[4]]))
plot(read.tree(text = trees[[5]]))
plot(read.tree(text = trees[[6]]))
plot(read.tree(text = trees[[7]]))
rep(0,100)
rel_distances <- matrix(rep(0,1e4), nrow = 10)
rel_distances <- matrix(rep(0,1e4), nrow = 100)
for(i in 1:99){
for(j in (i+1):100)
rel_distances[i,j] <- RobinsonFoulds(read.tree(text = trees[[i]]), read.tree(text = trees[[j]]))
}
rel_distances
par(mar = rep(0, 4))
image(rel_distances, useRaster = TRUE, axes = FALSE)
par(mar = rep(0, 4))
image(rel_distances, useRaster = TRUE)
par(mar = rep(0, 4))
plot.matrix(rel_distances)
install.packages("plot.matrix")
library(plot.matrix)
par(mar = rep(0, 4))
plot(rel_distances)
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(rel_distances)
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(rel_distances[1:50,1:50])
?dist.dna()
library("adegenet")
library("ape")
library("apTreeshape")
library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
#library("phyloch")
library("seqinr")
library("readr")
source("utilities.R")
library("ggplot2")
library("phyclust")
library("TreeDist")
library("TreeTools")
library("dplyr")
?dist.dna()
?cophenetic()
install.packages("trex")
?cophenetic()
?all.equal()
library("adegenet")
library("ape")
library("apTreeshape")
library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
#library("phyloch")
library("seqinr")
library("readr")
source("utilities.R")
library("progress")
library("ggplot2")
library("phyclust")
library("TreeDist")
library("TreeTools")
library("dplyr")
setwd("/Users/shashanksule/Documents/info_theoretic_phylo/")
sequence <- ReadCharacters("press_data.nex")
start <- Sys.time()
tree <- infotree(sequence)
end <- Sys.time()
library("readr")
library("ape")
library("TreeTools")
library("parallel")
source("utilities.R")
start <- Sys.time()
tree <- infotree(sequence)
end <- Sys.time()
end - start
