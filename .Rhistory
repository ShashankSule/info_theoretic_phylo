right_string <- infopart(right_sequence)
tree_string <- paste("(",left_string,", ",right_string,")", sep = "")
}
return(tree_string)
}
IG_tree_string <- paste(infopart(seqs, J="ig"), ";", sep="")
CE_tree_string <- paste(infopart(seqs, J="ce"),";",sep = "")
image(as.DNAbin(seqs))
layout(matrix(c(1,2), 1, 2))
#image(as.DNAbin(seqs))
plot(read.tree(text = IG_tree_string))
plot(read.tree(text = CE_tree_string))
min(0,0*log(0))
min(NaN, 0)
NaN + 0
NaN*Inf
mutual_info <- function(partition, sequence, pos, J = "ce"){
# inputs:
# partition -- boolean denoting the partitions
# sequence -- dataframe of type DNAbin or phyDat with each row an aligned sequence
# pos -- integer denoting the position in the sequence
# output:
# I(partition)
#computing p(x \oplus y)
p_xy <- base.freq(as.DNAbin(sequence))
A <- sequence[partition,pos]
B <- sequence[!partition,pos]
# Computing p(x)
p_x <- base.freq(as.DNAbin(A))
p_a <- length(A)/length(sequence)
# Computing p(y)
p_y <- base.freq(as.DNAbin(B))
p_b <- length(B)/length(sequence)
# Computing p(x,y)
I <- 0
for(i in c(1:4)){
if(J == "ce"){
#cross entropy
if(p_y[i] == 0){
y_term = 0
} else{
y_term = -p_x[i]*log2(p_y[i])
}
if(p_x[i] == 0){
x_term = 0
} else {
x_term = -p_y[i]*log2(p_x[i])
}
I <- I + x_term + y_term
}
if(J == "ig"){
#information gain
if(p_y[i] == 0){
y_term = 0
} else{
y_term = -p_y[i]*log2(p_y[i])
}
if(p_x[i] == 0){
x_term = 0
} else {
x_term = -p_x[i]*log2(p_x[i])
}
if(p_xy[i] == 0){
xy_term = 0
} else {
xy_term = -p_xy[i]*log2(p_xy[i])
}
I <- I + xy_term - p_a*x_term - p_b*y_term
}
}
return(I)
}
IG_tree_string <- paste(infopart(seqs, J="ig"), ";", sep="")
CE_tree_string <- paste(infopart(seqs, J="ce"),";",sep = "")
image(as.DNAbin(seqs))
layout(matrix(c(1,2), 1, 2))
#image(as.DNAbin(seqs))
plot(read.tree(text = IG_tree_string))
plot(read.tree(text = CE_tree_string))
mutual_info <- function(partition, sequence, pos, J = "ce"){
# inputs:
# partition -- boolean denoting the partitions
# sequence -- dataframe of type DNAbin or phyDat with each row an aligned sequence
# pos -- integer denoting the position in the sequence
# output:
# I(partition)
#computing p(x \oplus y)
p_xy <- base.freq(as.DNAbin(sequence))
A <- sequence[partition,pos]
B <- sequence[!partition,pos]
# Computing p(x)
p_x <- base.freq(as.DNAbin(A))
p_a <- length(A)/length(sequence)
# Computing p(y)
p_y <- base.freq(as.DNAbin(B))
p_b <- length(B)/length(sequence)
# Computing p(x,y)
I <- 0
for(i in c(1:4)){
if(J == "ce"){
#cross entropy
if(p_y[i] == 0){
y_term = 0
} else{
y_term = -p_x[i]*log2(p_y[i])
}
if(p_x[i] == 0){
x_term = 0
} else {
x_term = -p_y[i]*log2(p_x[i])
}
I <- I + x_term + y_term
}
if(J == "ig"){
#information gain
if(p_y[i] == 0){
y_term = 0
} else{
y_term = -p_y[i]*log2(p_y[i])
}
if(p_x[i] == 0){
x_term = 0
} else {
x_term = -p_x[i]*log2(p_x[i])
}
if(p_xy[i] == 0){
xy_term = 0
} else {
xy_term = -p_xy[i]*log2(p_xy[i])
}
I <- I + xy_term - p_a*x_term - p_b*y_term
}
}
return(I)
}
infopart <- function(sequence, J = "ce"){
#input:
# sequence -- aligned sequence in DNAbin or phyDat
# output:
# Newick string representing minimum information gain tree
# if there are only two sequences return dichotomous tree
if(length(sequence) == 1){
tree_string <- names(sequence)[1]
} else if(length(sequence) == 2){
tree_string <- paste("(", names(sequence)[1], ", ", names(sequence)[2], ")", sep = "")
} else{
# There are more than two sequences so we must find the optimal partition.
# Initialize the data
partition <- as.logical(splitset(length(sequence))[2,])
I <- 0
for(j in 1:attr(sequence, "nr")){
I <- I + mutual_info(partition, sequence, j)
}
max_val <- I
max_part <- partition
for(i in 2:(2^length(sequence)-1)){ # Run through all possible partitions
I <- 0
# Compute overall mutual information
#print(paste("computing the ",i,"th partition"))
partition <- as.logical(splitset(length(sequence))[i,])
for(j in 1:attr(sequence, "nr")){
I <- I + mutual_info(partition, sequence, j, J)
}
#print(paste("I =",I))
if(I > max_val){
max_val <- I
max_part <- partition
}
}
#print(paste("The partition is ", max_part))
left_sequence <- sequence[max_part,]
right_sequence <- sequence[!max_part,]
left_string <- infopart(left_sequence)
right_string <- infopart(right_sequence)
tree_string <- paste("(",left_string,", ",right_string,")", sep = "")
}
return(tree_string)
}
infopart <- function(sequence, J = "ce"){
#input:
# sequence -- aligned sequence in DNAbin or phyDat
# output:
# Newick string representing minimum information gain tree
# if there are only two sequences return dichotomous tree
if(length(sequence) == 1){
tree_string <- names(sequence)[1]
} else if(length(sequence) == 2){
tree_string <- paste("(", names(sequence)[1], ", ", names(sequence)[2], ")", sep = "")
} else{
# There are more than two sequences so we must find the optimal partition.
# Initialize the data
partition <- as.logical(splitset(length(sequence))[2,])
I <- 0
for(j in 1:attr(sequence, "nr")){
I <- I + mutual_info(partition, sequence, j)
}
max_val <- I
max_part <- partition
for(i in 2:(2^length(sequence)-1)){ # Run through all possible partitions
I <- 0
# Compute overall mutual information
#print(paste("computing the ",i,"th partition"))
partition <- as.logical(splitset(length(sequence))[i,])
for(j in 1:attr(sequence, "nr")){
I <- I + mutual_info(partition, sequence, j, J)
}
#print(paste("I =",I))
if(I > max_val){
max_val <- I
max_part <- partition
}
}
#print(paste("The partition is ", max_part))
left_sequence <- sequence[max_part,]
right_sequence <- sequence[!max_part,]
left_string <- infopart(left_sequence)
right_string <- infopart(right_sequence)
tree_string <- paste("(",left_string,", ",right_string,")", sep = "")
}
return(tree_string)
}
IG_tree_string <- paste(infopart(seqs, J="ig"), ";", sep="")
IG_tree_string
mutual_info <- function(partition, sequence, pos){
# inputs:
# partition -- boolean denoting the partitions
# sequence -- dataframe of type DNAbin or phyDat with each row an aligned sequence
# pos -- integer denoting the position in the sequence
# output:
# I(partition)
#computing p(x \oplus y)
p_xy <- base.freq(as.DNAbin(sequence))
A <- sequence[partition,pos]
B <- sequence[!partition,pos]
# Computing p(x)
p_x <- base.freq(as.DNAbin(A))
p_a <- length(A)/length(sequence)
# Computing p(y)
p_y <- base.freq(as.DNAbin(B))
p_b <- length(B)/length(sequence)
h_xy <- 0
h_x <- 0
h_y <- 0
# Computing p(x,y)
I <- 0
for(i in c(1:4)){
if(p_xy[i] !=0){
h_xy <- h_xy -p_xy[i]*log2(p_xy[i])
}
if(p_x[i] != 0){
h_x <- h_x -p_x[i]*log2(p_x[i])
}
if(p_y[i] != 0){
h_y <- h_y -p_y[i]*log2(p_y[i])
}
}
I <- h_xy - p_a*h_x - p_b*h_y
return(I)
}
infopart <- function(sequence){
#input:
# sequence -- aligned sequence in DNAbin or phyDat
# output:
# Newick string representing minimum information gain tree
# if there are only two sequences return dichotomous tree
if(length(sequence) == 1){
tree_string <- names(sequence)[1]
} else if(length(sequence) == 2){
tree_string <- paste("(", names(sequence)[1], ", ", names(sequence)[2], ")", sep = "")
} else{
# There are more than two sequences so we must find the optimal partition.
# Initialize the data
partition <- as.logical(splitset(length(sequence))[2,])
I <- 0
for(j in 1:attr(sequence, "nr")){
I <- I + mutual_info(partition, sequence, j)
}
max_val <- I
max_part <- partition
for(i in 2:(2^(length(sequence))-1)){ # Run through all possible partitions
I <- 0
# Compute overall mutual information
#print(paste("computing the ",i,"th partition"))
partition <- as.logical(splitset(length(sequence))[i,])
for(j in 1:attr(sequence, "nr")){
I <- I + mutual_info(partition, sequence, j)
}
#print(paste("I =",I))
if(I > max_val){
max_val <- I
max_part <- partition
}
}
#print(paste("The partition is ", max_part))
left_sequence <- sequence[max_part,]
right_sequence <- sequence[!max_part,]
left_string <- infopart(left_sequence)
right_string <- infopart(right_sequence)
tree_string <- paste("(",left_string,", ",right_string,")", sep = "")
}
return(tree_string)
}
paste(infopart(seqs), ";", sep="")
plot(read.tree(text = "(((tip 1, (tip 3, tip 5)), tip 6), ((tip 4, tip 8), (tip 2, (tip 7, tip 9))));"))
mutual_info <- function(partition, sequence, pos){
# inputs:
# partition -- boolean denoting the partitions
# sequence -- dataframe of type DNAbin or phyDat with each row an aligned sequence
# pos -- integer denoting the position in the sequence
# output:
# I(partition)
#computing p(x \oplus y)
p_xy <- base.freq(as.DNAbin(sequence))
A <- sequence[partition,pos]
B <- sequence[!partition,pos]
# Computing p(x)
p_x <- base.freq(as.DNAbin(A))
p_a <- length(A)/length(sequence)
# Computing p(y)
p_y <- base.freq(as.DNAbin(B))
p_b <- length(B)/length(sequence)
h_xy <- 0
h_x <- 0
h_y <- 0
# Computing p(x,y)
I <- 0
# for(i in c(1:4)){
#   if(p_xy[i] !=0){
#     h_xy <- h_xy -p_xy[i]*log2(p_xy[i])
#   }
#   if(p_x[i] != 0){
#     h_x <- h_x -p_x[i]*log2(p_x[i])
#   }
#   if(p_y[i] != 0){
#     h_y <- h_y -p_y[i]*log2(p_y[i])
#   }
# }
#
# I <- h_xy - p_a*h_x - p_b*h_y
for(i in c(1:4)){
if(p_x[i] !=0 ){
I <- I - p_y[i]*log2(p_x[i])
}
if(p_y[i] != 0){
I <- p_x[i]*log2(p_y[i])
}
}
return(I)
}
infopart <- function(sequence){
#input:
# sequence -- aligned sequence in DNAbin or phyDat
# output:
# Newick string representing minimum information gain tree
# if there are only two sequences return dichotomous tree
if(length(sequence) == 1){
tree_string <- names(sequence)[1]
} else if(length(sequence) == 2){
tree_string <- paste("(", names(sequence)[1], ", ", names(sequence)[2], ")", sep = "")
} else{
# There are more than two sequences so we must find the optimal partition.
# Initialize the data
partition <- as.logical(splitset(length(sequence))[2,])
I <- 0
for(j in 1:attr(sequence, "nr")){
I <- I + mutual_info(partition, sequence, j)
}
max_val <- I
max_part <- partition
for(i in 2:(2^(length(sequence))-1)){ # Run through all possible partitions
I <- 0
# Compute overall mutual information
#print(paste("computing the ",i,"th partition"))
partition <- as.logical(splitset(length(sequence))[i,])
for(j in 1:attr(sequence, "nr")){
I <- I + mutual_info(partition, sequence, j)
}
#print(paste("I =",I))
if(I < max_val){
max_val <- I
max_part <- partition
}
}
#print(paste("The partition is ", max_part))
left_sequence <- sequence[max_part,]
right_sequence <- sequence[!max_part,]
left_string <- infopart(left_sequence)
right_string <- infopart(right_sequence)
tree_string <- paste("(",left_string,", ",right_string,")", sep = "")
}
return(tree_string)
}
infopart(seqs)
library("adegenet")
library("ape")
library("apTreeshape")
library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
#library("phyloch")
library("seqinr")
source("utilities.R")
library("ggplot2")
trials <- coiii_pond[,1:12]
View(seqs)
getwd()
setwd("/Users/shashanksule/Documents/info_theoretic_phylo/")
?as.phyDat
trials <- as.phyDat(read.nexus.data("coiii.nex"),
type = "USER",
levels = c("a","c","g","t","-"),
all = TRUE)
trials <- read.nexus.data("coiii.nex")
trials
trials <- as.DNAbin(read.nexus.data("coiii.nex"))
as.phyDat(trials,
type = "USER",
levels = c("a","c","g","t","-"),
all = TRUE)
as.phyDat(trials,
all = TRUE)
trials$Bovine
trials$Xenopus
trials <- read.phyDat("coiii.nex", format = "nexus", type = "USER", levels = c("a","c", "g", "t","-"))
trials <- read.phyDat("coiii.nex", format = "nexus", type = "USER")
trials <- read.phyDat("coiii.nex", format = "nexus")
trials <- read.phyDat("coiii.nex", format = "nexus",)
trials <- read.nexus.data("coiii.nex")
trials
?read.nexus.data
trials <- as.DNAbin.list(read.nexus.data("coiii.nex"), all = TRUE)
trials
trials <- as.DNAbin(read.nexus.data("coiii.nex"), all = TRUE)
trials
trials$Bovine[1:785]
view(trials$Bovine[1:785])
trials$Bovine[1:785]
trials$Bovine
str <- "dodo"
trr <- read.tree(text = paste("(", str, ")"))
trr
plot(trr)
str <- "dodo"
trr <- read.tree(text = paste("(",str,")", ";"), sep = "")
trr
plot(dodo)
plot(trr)
trr
attributes(trr)
tip.label(trr)
trr$tip.label
str <- "dodo"
trr <- read.tree(text = paste("(",str,")", ";"), sep = "")
make_newick <- function(tips){
# make an n-chotomous tree on an array of strings
return(paste("(", tips, ");", sep = ""))
}
make_newick("hoho")
trr <- read.tree(text = make_newick("hoho"))
trr
source("utilities.R")
raw_data <- ReadCharacters("coiii.nex")
library(TreeTools)
raw_data <- ReadCharacters("coiii.nex")
names(raw_data)
?ReadCharacters
raw_data <- ReadAsPhyDat("coiii.nex")
raw_data
base.freq(as.DNAbin(raw_data), all = TRUE)
raw_data
class(raw_data)
trials <- as.DNAbin(raw_data)
names(raw_data)
names(trials)
n = 2
for(i in c(1,n-2)){ print("hello") }
for(i in c(1:n-2)){ print("hello") }
n <- 3
for(i in c(1:n-2)){ print("hello") }
c(1:n-2)
1:n-2
n-2
c(1:1)
c(1 : n-2)
end <- n-2
c(1:end)
c(1:3)
names(trr)
trr$tip.label
trials["Bovine"]
trials["Bovine","Chicken"]
trials[c("Bovine","Chicken")]
c(2,3)
lapply(names(trials),make_newick)
length(lapply(names(trials),make_newick))
A <- trials[1:5]
B <- trials[6:10]
rbind(A,B)
?join
join(A,B)
library(dplyr)
?join
join(A,B)
install.packages("plyr")
c(A,B)
base.freq(as.DNAbin(trials), all = TRUE)
base.freq(trials, all = TRUE)
trials[1,1]
trials["Bovine",1]
trials[1:89]
