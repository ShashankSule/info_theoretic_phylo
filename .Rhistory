infotree <- function(sequence) {
#input:
# sequence -- matrix of characters
# output:
# Newick string representing minimum information gain tree
# if there are only two sequences return dichotomous tree
l = DIM(sequence)
names = row.names(sequence)
if (l == 1) {
tree_string <- names[1]
} else if (l == 2) {
tree_string <- paste("(", names[1], ", ", names[2], ")", sep = "")
} else{
# There are more than two sequences so we must find the optimal partition.
# Initialize the data
partition <- as.logical(splitset(l)[2, ])
I <- 0
for (j in 1:dim(sequence)[2]) {
#print(paste("I =",I))
I <- I + mutual_info(partition, sequence, j)
}
max_val <- I
max_part <- partition
for (i in 2:(2 ^ (l - 1))) {
# Run through all possible partitions
I <- 0
# Compute overall mutual information
#print(paste("computing the ",i,"th partition"))
partition <- as.logical(splitset(l)[i, ])
for (j in 1:dim(sequence)[2]) {
I <- I + mutual_info(partition, sequence, j)
}
print(paste("I =", I))
if (I > max_val) {
max_val <- I
max_part <- partition
}
}
print(paste("The partition is ", max_part))
left_sequence <- sequence[max_part, , drop = FALSE]
right_sequence <- sequence[!max_part, , drop = FALSE]
left_string <- infotree(left_sequence)
right_string <- infotree(right_sequence)
tree_string <-
paste("(", left_string, ", ", right_string, ")", sep = "")
}
return(tree_string)
}
infotree(trr_sequence2)
plot(trr)
plot(trr[[1]])
library("adegenet")
library("ape")
library("apTreeshape")
library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
#library("phyloch")
library("seqinr")
source("utilities.R")
library("ggplot2")
library("TreeTools")
library("phyclust")
sequence <- ReadCharacters("coiii.nex")
rownames(sequence) <- names(as.DNAbin(read.nexus.data("coiii.nex")))
plot(read.tree(text = paste(agg_clustering(sequence), ";", sep="")))
source("utilities.R")
plot(read.tree(text = paste(agg_clustering(sequence), ";", sep="")))
trr <- rtreeshape(1,9,model = "yule")
plot(as.phylo(trr[[1]]))
trr_sequence <- as.character(simSeq(as.phylo(trr[[1]]),l=1000, type = "DNA"))
image(as.DNAbin.character(trr_sequence))
D <- dist.dna(as.DNAbin.character(trr_sequence), model = "TN93")
trr <- rtreeshape(1,9,model = "yule")
plot(as.phylo(trr[[1]]))
trr_sequence <- as.character(simSeq(as.phylo(trr[[1]]),l=1000, type = "DNA"))
image(as.DNAbin.character(trr_sequence))
div_tree <- infotree(trr_sequence)
agg_tree <- agg_clustering(trr_sequence)
agg_tree <- agg_clustering(trr_sequence)
rownames(trr_sequence)
forests <- make_newick(rownames(sequence))
x_names <- read.tree(text = paste(forests[1], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[2], ";", sep = ""))$tip.label
max_dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
x_names <- read.tree(text = paste(forests[1], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[2], ";", sep = ""))$tip.label
print(x_names)
print(y_names)
max_dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
max_pair <- c(1, 2)
#Subroutine for computing the closest two clusters
for (k in 1:(length(forests) - 1)) {
for (j in (k + 1):length(forests)) {
x_names <- read.tree(text = paste(forests[k], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[j], ";", sep = ""))$tip.label
dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
cat("Current pair: ",
x_names,
"/",
y_names,
"; affinity =",
dist,
"\n")
if (dist < max_dist) {
max_dist <- dist
max_pair <- c(k, j)
}
}
}
#Just some diagnostics
#Subroutine for joining the two forests
new_branch <-
paste("(", forests[max_pair[1]], ",", forests[max_pair[2]], ")", sep =
"")
forests <- forests[-max_pair]
forests <- c(forests, new_branch)
forests
plot(read.tree(text = paste(agg_clustering(sequence), ";", sep="")))
agg_tree <- agg_clustering(trr_sequence)
sequence <- trr_sequence
x_names <- read.tree(text = paste(forests[1], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[2], ";", sep = ""))$tip.label
print(x_names)
print(y_names)
max_dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
max_pair <- c(1, 2)
#Subroutine for computing the closest two clusters
for (k in 1:(length(forests) - 1)) {
for (j in (k + 1):length(forests)) {
x_names <- read.tree(text = paste(forests[k], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[j], ";", sep = ""))$tip.label
dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
cat("Current pair: ",
x_names,
"/",
y_names,
"; affinity =",
dist,
"\n")
if (dist < max_dist) {
max_dist <- dist
max_pair <- c(k, j)
}
}
}
x_names <- read.tree(text = paste(forests[1], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[2], ";", sep = ""))$tip.label
print(x_names)
print(y_names)
max_dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
max_pair <- c(1, 2)
forests <- make_newick(rownames(sequence))
x_names <- read.tree(text = paste(forests[1], ";", sep = ""))$tip.label
y_names <- read.tree(text = paste(forests[2], ";", sep = ""))$tip.label
max_dist <-
alg_info(matrix(sequence[x_names, ], nrow = length(x_names)),
matrix(sequence[y_names, ], nrow = length(y_names)))
rownames(sequence)
read.tree(text = paste(forests[1], ";", sep = ""))
forests[1]
read.tree(text = "(tip 1);")
?read.tree
read.tree(text = "(tip 1);", comment.char = " ")
paste("tip", 1:9, sep = "")
?rtreeshape
trr[[1]]
names(trr)
trr$names
trr[[1]]$names
trr <- rtreeshape(1,9,model = "yule")
trr[[1]]$names <- paste("tip", 1:9, sep = "")
plot(as.phylo(trr[[1]]))
trr_sequence <- as.character(simSeq(as.phylo(trr[[1]]),l=1000, type = "DNA"))
image(as.DNAbin.character(trr_sequence))
div_tree <- infotree(trr_sequence)
agg_tree <- agg_clustering(trr_sequence)
plot(trr[[1]])
title("Original")
trr <- rtreeshape(1,9,model = "yule")
trr[[1]]$names <- paste("tip", 1:9, sep = "")
plot(as.phylo(trr[[1]]))
trr_sequence <- as.character(simSeq(as.phylo(trr[[1]]),l=1000, type = "DNA"))
image(as.DNAbin.character(trr_sequence))
div_tree <- infotree(trr_sequence)
agg_tree <- agg_clustering(trr_sequence)
plot(as.phylo(trr[[1]]))
title("Original")
plot(trr[[1]])
title("Original")
plot(trr[[1]])
title("Original")
layout(matrix(c(1,2), 1, 2))
plot(read.tree(text = paste(div_tree, ";", sep = "")))
title("Divisive tree")
plot(read.tree(text = paste(agg_tree, ";", sep = "")))
title("Agglomerative tree")
plot(trr[[1]])
title("Original")
layout(matrix(c(1,2), 1, 2))
plot(read.tree(text = paste(div_tree, ";", sep = "")))
title("Divisive tree")
plot(read.tree(text = paste(agg_tree, ";", sep = "")))
title("Agglomerative tree")
layout(matrix(c(1,2), 1, 2))
plot(read.tree(text = paste(div_tree, ";", sep = "")))
title("Divisive tree")
plot(read.tree(text = paste(agg_tree, ";", sep = "")))
title("Agglomerative tree")
library("adegenet")
library("ape")
library("apTreeshape")
library("BoSSA")
library("diversitree")
library("pegas")
library("phangorn")
library("phylobase")
#library("phyloch")
library("seqinr")
source("utilities.R")
library("ggplot2")
library("phyclust")
library("TreeDist")
library("TreeTools")
sequence <- ReadCharacters("mc.nex")
sequence
View(sequence)
View(sequence)
image(as.DNAbin(sequence))
dist.dna(as.DNAbin(sequence))
layout(matrix(c(1,2), 1, 2))
plot(read.tree(text = "((2: 5.0, 4: 6.0): 3.0, (1: 3.0, (5: 3.0, 3: 2.0): 1.0): 2.0);"))
title("Original Tree")
plot(nj(dist.dna(as.DNAbin(sequence))))
title("Neighbour Joining tree")
plot(nj(dist.dna(as.DNAbin(sequence))))
plot(read.tree(text = "((2: 5.0, 4: 6.0): 3.0, (1: 3.0, (5: 3.0, 3: 2.0): 1.0): 2.0);"))
plot(upgma(dist.dna(as.DNAbin(sequence))))
dist.dna(as.DNAbin(sequence))
image(as.DNAbin(sequence))
ms()
?ms()
ms(nsam = 5, opts = "-T -G 0.2")
#datwriter <- function(samps, options){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
first_string <- "2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)
5 1000 1  * <# seqs>  <# nucleotide sites>  <# replicates>
-1         * <tree length, use -1 if tree below has absolute branch lengths>"
ms_tree <- ms(nnsam = samps, opts = options)
#datwriter <- function(samps, options){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
first_string <- "2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)
5 1000 1  * <# seqs>  <# nucleotide sites>  <# replicates>
-1         * <tree length, use -1 if tree below has absolute branch lengths>"
ms_tree <- ms(nsam = samps, opts = options)
tree_string <- ms_tree[3]
second_string <- "3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV
5 * kappa or rate parameters in model
0 0     * <alpha>  <#categories for discrete gamma>
1.0  0.0  0.0  0.0    * base frequencies
T        C        A        G"
dat_string <- cat(paste(first_string, "\n", tree_string, "\n", second_string, sep = ""))
#}
#datwriter <- function(samps, options){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
first_string <- "2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)
5 1000 1  * <# seqs>  <# nucleotide sites>  <# replicates>
-1         * <tree length, use -1 if tree below has absolute branch lengths>"
ms_tree <- ms(nsam = samps, opts = options)
tree_string <- ms_tree[3]
second_string <- "3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV
5 * kappa or rate parameters in model
0 0     * <alpha>  <#categories for discrete gamma>
1.0  0.0  0.0  0.0    * base frequencies
T        C        A        G"
dat_string <- cat(paste(first_string, "\n\n", tree_string, "\n\n", second_string, sep = ""))
#}
write(dat_string, file = "trialstring.dat")
getwd()
setwd("/Users/shashanksule/Documents/info_theoretic_phylo/")
write(dat_string, file = "trialstring.dat")
#datwriter <- function(samps, options){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
first_string <- "2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)
5 1000 1  * <# seqs>  <# nucleotide sites>  <# replicates>
-1         * <tree length, use -1 if tree below has absolute branch lengths>"
ms_tree <- ms(nsam = samps, opts = options)
tree_string <- ms_tree[3]
second_string <- "3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV
5 * kappa or rate parameters in model
0 0     * <alpha>  <#categories for discrete gamma>
1.0  0.0  0.0  0.0    * base frequencies
T        C        A        G"
dat_string <- paste(first_string, "\n\n", tree_string, "\n\n", second_string, sep = "")
#}
dat_string
?writeLines
#datwriter <- function(samps, options){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
first_string <- """
2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)
5 1000 1  * <# seqs>  <# nucleotide sites>  <# replicates>
-1         * <tree length, use -1 if tree below has absolute branch lengths>
"""
#datwriter <- function(samps, options){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
first_string <- "
2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)
5 1000 1  * <# seqs>  <# nucleotide sites>  <# replicates>
-1         * <tree length, use -1 if tree below has absolute branch lengths>
"
ms_tree <- ms(nsam = samps, opts = options)
tree_string <- ms_tree[3]
second_string <- "
3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV
5 * kappa or rate parameters in model
0 0     * <alpha>  <#categories for discrete gamma>
1.0  0.0  0.0  0.0    * base frequencies
T        C        A        G
"
cat(first_string, tree_string, second_string, file = "trialstring.dat", sep = "\n", append = TRUE)
#}
#datwriter <- function(samps, options){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
sites <- 1000
replicates <- 1
format_initialization <- "
2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)
"
samples_sites_replicates <- paste(samps, sites, replicates, "* <# seqs>  <# nucleotide sites>  <# replicates>", sep = " ")
length_string <- "
-1         * <tree length, use -1 if tree below has absolute branch lengths>
"
ms_tree <- ms(nsam = samps, opts = options)
tree_string <- ms_tree[3]
model_string <- "
3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV
5 * kappa or rate parameters in model
0 0     * <alpha>  <#categories for discrete gamma>
1.0  0.0  0.0  0.0    * base frequencies
T        C        A        G
"
cat(format_initialization,
samples_sites_replicates,
model_string,
second_string, file = "trialstring.dat", sep = "\n", append = TRUE)
#}
#datwriter <- function(samps, options, sites, replicates){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
sites <- 1000
replicates <- 1
format_initialization <- "2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)"
samples_sites_replicates <- paste(samps, sites, replicates, "* <# seqs>  <# nucleotide sites>  <# replicates>", sep = " ")
length_string <- "
-1         * <tree length, use -1 if tree below has absolute branch lengths>
"
ms_tree <- ms(nsam = samps, opts = options)
tree_string <- ms_tree[3]
model_string <- "3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV
5 * kappa or rate parameters in model
0 0     * <alpha>  <#categories for discrete gamma>
1.0  0.0  0.0  0.0    * base frequencies
T        C        A        G"
cat(format_initialization,
samples_sites_replicates,
length_string,
tree_string,
model_string, file = "trialstring.dat", sep = "\n", append = TRUE)
#}
#datwriter <- function(samps, options, sites, replicates){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
sites <- 1000
replicates <- 1
format_initialization <- "2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)"
samples_sites_replicates <- paste(samps, sites, replicates, "* <# seqs>  <# nucleotide sites>  <# replicates>", sep = " ")
length_string <- "
-1         * <tree length, use -1 if tree below has absolute branch lengths>
"
ms_tree <- ms(nsam = samps, opts = options)
tree_string <- ms_tree[3]
model_string <- "3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV
5 * kappa or rate parameters in model
0 0     * <alpha>  <#categories for discrete gamma>
1.0  0.0  0.0  0.0    * base frequencies
T        C        A        G"
cat(format_initialization,
samples_sites_replicates,
length_string,
tree_string,
model_string, file = "trialstring.dat", sep = "\n", append = FALSE)
#}
#datwriter <- function(samps, options, sites, replicates){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
sites <- 1000
replicates <- 1
format_initialization <- "2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)"
samples_sites_replicates <- paste(samps, sites, replicates, "* <# seqs>  <# nucleotide sites>  <# replicates>", sep = " ")
length_string <- "
-1         * <tree length, use -1 if tree below has absolute branch lengths>
"
ms_tree <- ms(nsam = samps, opts = options)
tree_string <- ms_tree[3]
model_string <- "3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV
5 * kappa or rate parameters in model
0 0     * <alpha>  <#categories for discrete gamma>
1.0  0.0  0.0  0.0    * base frequencies
T        C        A        G"
cat(format_initialization,
samples_sites_replicates,
length_string,
tree_string,
model_string, file = "trialstring.dat", sep = "\n", append = FALSE)
#}
#datwriter <- function(samps, options, sites, replicates){
#input: samples for ms()
#output: a dat file ready to be crunched by the evolver
samps <- 3;
options <- "-T -G 0.2"
sites <- 1000
replicates <- 1
format_initialization <- "2          * 0: paml format (mc.paml); 1:paup format (mc.nex)
21234567   * random number seed (odd number)"
samples_sites_replicates <- paste(samps, sites, replicates, "* <# seqs>  <# nucleotide sites>  <# replicates>", sep = " ")
length_string <- "
-1         * <tree length, use -1 if tree below has absolute branch lengths>
"
ms_tree <- ms(nsam = samps, opts = options)
tree_string <- ms_tree[3]
model_string <- "
3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV
5 * kappa or rate parameters in model
0 0     * <alpha>  <#categories for discrete gamma>
1.0  0.0  0.0  0.0    * base frequencies
T        C        A        G"
cat(format_initialization,
samples_sites_replicates,
length_string,
tree_string,
model_string, file = "trialstring.dat", sep = "\n", append = FALSE)
#}
sequence <- ReadCharacters("mc.nex")
sequence <- ReadCharacters("paml4.8/mc.nex")
image(as.DNAbin(sequence))
system("paml4.8/bin/evolver 5 paml4.8/MCbase.dat")
system("paml4.8/bin/evolver 5 paml4.8/MCbase.dat")
sequence <- ReadCharacters("paml4.8/mc.nex")
sequence <- ReadCharacters("mc.nex")
plot(read.tree(text = "(s3: 1.016089916229,(s1: 0.109059147537,s2: 0.109059147537): 0.907030761242);"))
system("paml4.8/bin/evolver 5 paml4.8/MCbase.dat")
system("paml4.8/bin/evolver 5 paml4.8/MCbase.dat")
sequence <- ReadCharacters("mc.nex")
system("paml4.8/bin/evolver 5 paml4.8/MCbase.dat")
sequence <- ReadCharacters("mc.nex")
layout(matrix(c(1,2), 1, 2))
plot(read.tree(text = "((E: 0.874590, (H: 0.574702, D: 0.574702): 0.299888): 0.625410, (F: 1.403589, ((I: 0.343558, A: 0.343558): 0.801573, (C: 0.769887, (B: 0.205990, G: 0.205990): 0.563897): 0.375243): 0.258459): 0.096411);"))
title("Original Tree")
plot(nj(dist.dna(as.DNAbin(sequence))))
plot(read.tree(text = "((E: 0.874590, (H: 0.574702, D: 0.574702): 0.299888): 0.625410, (F: 1.403589, ((I: 0.343558, A: 0.343558): 0.801573, (C: 0.769887, (B: 0.205990, G: 0.205990): 0.563897): 0.375243): 0.258459): 0.096411);"))
