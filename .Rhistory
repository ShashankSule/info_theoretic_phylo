read.paml("paml4.8/mc.paml")
read.nexus("paml4.8/mc.paml")
read.nexus("mc.nex")
?read.nexus.data
read.nexus.data("mc.nex")
?ReadCharacters
ReadTntCharacters("mc.nex")
read.nexus("mc.nex", force.multi = )
read.nexus("mc.nex", force.multiPhylo = TRUE)
ReadAsPhyDat("mc.nex")
plot(read.tree(text = "((S5: 0.266114, S2: 0.266114): 1.233886, (S1: 0.994706, (S4: 0.342273, S3: 0.342273): 0.652432): 0.505294);
"))
plot(read.tree(text = "(S4: 1.500000, ((S5: 0.424118, (S1: 0.407657, S3: 0.407657): 0.016461): 0.352014, S2: 0.776132): 0.723868);
"))
plot(read.tree(text = "(S5: 1.500000, (((S1: 0.184782, S2: 0.184782): 0.085442, S4: 0.270225): 0.296130, S3: 0.566355): 0.933645);
"))
plot(read.tree(text = "(S5: 1.500000, (((S1: 0.184782, S2: 0.184782): 0.085442, S4: 0.270225): 0.296130, S3: 0.566355): 0.933645);
"))
plot(read.tree(text = "((S4: 1.054292, S2: 1.054292): 0.445708, (S3: 0.849923, (S5: 0.600202, S1: 0.600202): 0.249721): 0.650077);
"))
paup
read.dna("mc.nex")
?ReadCharacters()
ReadCharacters("paml4.8/mc.nex")
read.nexus("paml4.8/mctrees.nex")
ReadCharacters("paml4.8/mc.nex")
read.nexus("paml4.8/mctrees.nex")
?sample
sample(1e6:1e9, 1)
2*sample(1e6:1e9, 1) + 1
2*sample(1e6:1e9, 1) + 1
2*sample(1e6:1e9, 1) + 1
2*sample(1e6:1e9, 1) + 1
2*sample(1e6:1e7, 1) + 1
2*sample(1e6:1e7, 1) + 1
2*sample(1e6:1e7, 1) + 1
2*sample(1e6:1e7, 1) + 1
2*sample(1e6:1e7, 1) + 1
2*sample(1e6:1e7, 1) + 1
2*sample(1e6:1e7, 1) + 1
2*sample(1e6:1e7, 1) + 1
readNexus("paml4.8/mctrees.nex")
write.nexus(original_tree, file = "nextree.nex")
getwd()
readNexus("paml4.8/mctrees.nex")
treex <- c(original_tree, produced_tree)
write.nexus(treex, "treesx.nex")
class(treex)
?write.nexus
?read.nexus.data()
?ReadCharacters()
write.nexus(original_tree, produced_tree, file = "treex.nex")
treex <- read.nexus("treex.nex")
treex
treex <- read.nexus("paml4.8/mctrees.nex")
treex
plot(treex)
write.nexus(seqs, file = "seqs.nex")
write.nexus.data(as.DNAbin(seqs), file = "seqs.nex")
seqs <- ReadCharacters("seqs.nex")
View(seqs)
View(seqs)
co3 <- ReadCharacters("coiii.nex")
write.nexus.data(co3, sequence, file = "combo.nex")
write.nexus.data()
write.nexus.data(as.DNAbin(co3), as.DNAbin(sequence), file = "combo.nex")
?write.nexus.data()
write.nexus.data(as.DNAbin(co3), as.DNAbin(sequence), file = "combo.nex", format = "dna")
write.nexus.data(co3, sequence, file = "combo.nex", format = "dna")
write.nexus.data(c(co3, sequence), file = "combo.nex", format = "dna")
read.nexus.data("combo.nex")
write.nexus.data(c(co3[,1:10], sequence[,1:10]), file = "combo.nex", format = "dna")
read.nexus.data("combo.nex")
ReadCharacters("combo.nex")
WriteTntCharacters(co3, sequence)
WriteTntCharacters(co3, sequence, "w")
2*sample(1e6, 1e7, 1) + 1
2*sample(1e6:1e7, 1) + 1
seed <- 2*sample(1e6:1e7, 1) + 1
format_string <- "2        * 0: paml format (mc.paml); 1:paup format (mc.nex)"
seed_string <- seed   #* random number seed (odd number)
seqs_sites_reps <- "5 10000 1 * <# seqs>  <# nucleotide sites>  <# replicates>"
rates_string <- "0.1 0.2 0.3 1.5   * birth rate, death rate, sampling fraction, and mutation rate (tree height)"
model_string <- "3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV"
parameter_string <- "5 * kappa or rate parameters in model"
gamma_string <- "0  4     * <alpha>  <#categories for discrete gamma>"
equilibrium_string <- "0.1 0.2 0.3 0.4    * base frequencies
T   C   A   G"
cat(format_string,
seed_string,
seqs_sites_reps,
rates_string,
model_string,
parameter_string,
gamma_string,
equilibrium_string,
file = "MCbaseRTree.dat",
sep = "\n\n",
append= FALSE)
hit_dat <- function(){
seed <- 2*sample(1e6:1e7, 1) + 1
format_string <- "2        * 0: paml format (mc.paml); 1:paup format (mc.nex)"
seed_string <- seed   #* random number seed (odd number)
seqs_sites_reps <- "5 10000 1 * <# seqs>  <# nucleotide sites>  <# replicates>"
rates_string <- "0.1 0.2 0.3 1.5   * birth rate, death rate, sampling fraction, and mutation rate (tree height)"
model_string <- "3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV"
parameter_string <- "5 * kappa or rate parameters in model"
gamma_string <- "0  4     * <alpha>  <#categories for discrete gamma>"
equilibrium_string <- "0.1 0.2 0.3 0.4    * base frequencies
T   C   A   G"
cat(format_string,
seed_string,
seqs_sites_reps,
rates_string,
model_string,
parameter_string,
gamma_string,
equilibrium_string,
file = "MCbaseRTree.dat",
sep = "\n\n",
append= FALSE)
}
hit_dat()
list()
jojo <- list()
jojo
c(jojo, "1")
system("paml4.8/bin/evolver 5 paml4.8/MCbaseRTree.dat")
system("paml4.8/src/evolverRandomTree 5 paml4.8/MCbaseRTree.dat")
hit_dat()
getwd()
hit_dat <- function(){
seed <- 2*sample(1e6:1e7, 1) + 1
format_string <- "2        * 0: paml format (mc.paml); 1:paup format (mc.nex)"
seed_string <- seed   #* random number seed (odd number)
seqs_sites_reps <- "5 10000 1 * <# seqs>  <# nucleotide sites>  <# replicates>"
rates_string <- "0.1 0.2 0.3 1.5   * birth rate, death rate, sampling fraction, and mutation rate (tree height)"
model_string <- "3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV"
parameter_string <- "5 * kappa or rate parameters in model"
gamma_string <- "0  4     * <alpha>  <#categories for discrete gamma>"
equilibrium_string <- "0.1 0.2 0.3 0.4    * base frequencies
T   C   A   G"
cat(format_string,
seed_string,
seqs_sites_reps,
rates_string,
model_string,
parameter_string,
gamma_string,
equilibrium_string,
file = "/paml4.8/MCbaseRTree.dat",
sep = "\n\n",
append= FALSE)
}
hit_dat
hit_dat <- function(){
seed <- 2*sample(1e6:1e7, 1) + 1
format_string <- "2        * 0: paml format (mc.paml); 1:paup format (mc.nex)"
seed_string <- seed   #* random number seed (odd number)
seqs_sites_reps <- "5 10000 1 * <# seqs>  <# nucleotide sites>  <# replicates>"
rates_string <- "0.1 0.2 0.3 1.5   * birth rate, death rate, sampling fraction, and mutation rate (tree height)"
model_string <- "3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV"
parameter_string <- "5 * kappa or rate parameters in model"
gamma_string <- "0  4     * <alpha>  <#categories for discrete gamma>"
equilibrium_string <- "0.1 0.2 0.3 0.4    * base frequencies
T   C   A   G"
cat(format_string,
seed_string,
seqs_sites_reps,
rates_string,
model_string,
parameter_string,
gamma_string,
equilibrium_string,
file = "paml4.8/MCbaseRTree.dat",
sep = "\n\n",
append= FALSE)
}
hit_dat()
hit_dat
hit_dat()
read.nexus("paml4.8/mctrees.nex")
read.nexus("paml4.8/mctrees.nex")
read.nexus("paml4.8/mctrees.nex")
read.nexus("paml4.8/mctrees.nex")
plot(read.nexus("paml4.8/mctrees.nex"))
system("paml4.8/src/evolverRandomTree 5 paml4.8/MCbaseRTree.dat")
trees <- list()
sequences <- list()
for(i in 1:100){
hit_dat()
system("paml4.8/src/evolverRandomTree 5 paml4.8/MCbaseRTree.dat")
trees <- c(trees, read.nexus("mctrees.nex"))
sequences <- c(sequences, ReadCharacters("mc.nex"))
}
trees
class(trees)
trees[[1]]
?read
?read()
View(sequences)
read.delim("mctrees.nex")
read.delim("mctrees.txt")
read.delim("paml4.8/mctrees.txt")
View("paml4.8/mctrees.txt")
"paml4.8/mctrees.txt"
write(read.nexus("paml4.8/mctrees.nex"))
read.nexus("paml4.8/mctrees.nex")
write.tree(read.nexus("paml4.8/mctrees.nex"))
plot(read.tree(text = "(((S4:0.343603,S1:0.343603):1.051252,S3:1.394855):0.105145,(S5:1.482989,S2:1.482989):0.017011)-;"))
plot(read.tree(text = "(((S4:0.343603,S1:0.343603):1.051252,S3:1.394855):0.105145,(S5:1.482989,S2:1.482989):0.017011);"))
trees <- list()
sequences <- list()
for(i in 1:10){
hit_dat()
system("paml4.8/src/evolverRandomTree 5 paml4.8/MCbaseRTree.dat")
trees[[i]] <- write.tree(read.nexus("mctrees.nex"))
sequences[[i]] <- ReadCharacters("mc.nex")
}
trees
sequences
dim(sequences[[5]])
?is.ultrametric
hit_dat <- function(format = 2,
seqs = 5,
sites = 10000,
reps = 1,
birth = 0.1,
death = 0.2,
sampling= 0.3,
mutation = 1.5,
model = 3,
parameters = "5",
gamma = "0 4",
equilibrium = "0.1 0.2 0.3 0.4"
){
seed <- 2*sample(1e6:1e7, 1) + 1
format_string <- paste(format,
"        * 0: paml format (mc.paml); 1:paup format (mc.nex)",sep = "")
seed_string <- seed   #* random number seed (odd number)
seqs_sites_reps <- paste(seqs, sites, reps, "<# seqs>  <# nucleotide sites>  <# replicates>", sep = " ")
#"5 10000 1 * <# seqs>  <# nucleotide sites>  <# replicates>"
rates_string <- paste(birth, death, sampling, mutation, sep = " ")
#"0.1 0.2 0.3 1.5   * birth rate, death rate, sampling fraction, and mutation rate (tree height)"
model_string <- model
#"3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV"
parameter_string <- parameters
#"5 * kappa or rate parameters in model"
gamma_string <- gamma
#"0  4     * <alpha>  <#categories for discrete gamma>"
equilibrium_string <- equilibrium
#"0.1 0.2 0.3 0.4    * base frequencies
#  T   C   A   G"
cat(format_string,
seed_string,
seqs_sites_reps,
rates_string,
model_string,
parameter_string,
gamma_string,
equilibrium_string)
# file = "paml4.8/MCbaseRTree.dat",
# sep = "\n\n",
# append= FALSE)
}
hit_dat()
hit_dat <- function(format = 2,
seqs = 5,
sites = 10000,
reps = 1,
birth = 0.1,
death = 0.2,
sampling= 0.3,
mutation = 1.5,
model = 3,
parameters = "5",
gamma = "0 4",
equilibrium = "0.1 0.2 0.3 0.4"
){
seed <- 2*sample(1e6:1e7, 1) + 1
format_string <- paste(format,
"        * 0: paml format (mc.paml); 1:paup format (mc.nex)",sep = "")
seed_string <- seed   #* random number seed (odd number)
seqs_sites_reps <- paste(seqs, sites, reps, "<# seqs>  <# nucleotide sites>  <# replicates>", sep = " ")
#"5 10000 1 * <# seqs>  <# nucleotide sites>  <# replicates>"
rates_string <- paste(birth, death, sampling, mutation, sep = " ")
#"0.1 0.2 0.3 1.5   * birth rate, death rate, sampling fraction, and mutation rate (tree height)"
model_string <- model
#"3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV"
parameter_string <- parameters
#"5 * kappa or rate parameters in model"
gamma_string <- gamma
#"0  4     * <alpha>  <#categories for discrete gamma>"
equilibrium_string <- equilibrium
#"0.1 0.2 0.3 0.4    * base frequencies
#  T   C   A   G"
cat(format_string,
seed_string,
seqs_sites_reps,
rates_string,
model_string,
parameter_string,
gamma_string,
equilibrium_string, sep = "\n\n")
# file = "paml4.8/MCbaseRTree.dat",
# sep = "\n\n",
# append= FALSE)
}
hit_dat()
hit_dat <- function(format = 2,
seqs = 5,
sites = 10000,
reps = 1,
birth = 0.1,
death = 0.2,
sampling= 0.3,
mutation = 1.5,
model = 3,
parameters = "5",
gamma = "0 4",
equilibrium = "0.1 0.2 0.3 0.4"
){
seed <- 2*sample(1e6:1e7, 1) + 1
format_string <- paste(format,
"        * 0: paml format (mc.paml); 1:paup format (mc.nex)",sep = "")
seed_string <- seed   #* random number seed (odd number)
seqs_sites_reps <- paste(seqs, sites, reps, "<# seqs>  <# nucleotide sites>  <# replicates>", sep = " ")
#"5 10000 1 * <# seqs>  <# nucleotide sites>  <# replicates>"
rates_string <- paste(birth, death, sampling, mutation, sep = " ")
#"0.1 0.2 0.3 1.5   * birth rate, death rate, sampling fraction, and mutation rate (tree height)"
model_string <- model
#"3          * model: 0:JC69, 1:K80, 2:F81, 3:F84, 4:HKY85, 5:T92, 6:TN93, 7:REV"
parameter_string <- parameters
#"5 * kappa or rate parameters in model"
gamma_string <- gamma
#"0  4     * <alpha>  <#categories for discrete gamma>"
equilibrium_string <- equilibrium
#"0.1 0.2 0.3 0.4    * base frequencies
#  T   C   A   G"
cat(format_string,
seed_string,
seqs_sites_reps,
rates_string,
model_string,
parameter_string,
gamma_string,
equilibrium_string,
file = "paml4.8/MCbaseRTree.dat",
sep = "\n\n",
append= FALSE)
}
hit_dat()
trees <- list()
sequences <- list()
for(i in 1:10){
hit_dat()
system("paml4.8/src/evolverRandomTree 5 paml4.8/MCbaseRTree.dat")
trees[[i]] <- write.tree(read.nexus("mctrees.nex"))
sequences[[i]] <- ReadCharacters("mc.nex")
}
trees
lapply(sequences, infotree)
hit_dat(sites = 10)
trees <- list()
sequences <- list()
for(i in 1:10){
hit_dat(sites = 100)
system("paml4.8/src/evolverRandomTree 5 paml4.8/MCbaseRTree.dat")
trees[[i]] <- write.tree(read.nexus("mctrees.nex"))
sequences[[i]] <- ReadCharacters("mc.nex")
}
source("utilities.R")
?sapply()
lapply(agg_clustering, sequences)
lapply(sequences, agg_clustering)
trials <- c(1:10)
div_trees <- lapply(sequences, infotree)
agg_trees <- lapply(sequences, agg_clustering)
div_trees
?apply()
div_trees
c(div_trees, agg_trees)
matrix(c(div_trees, agg_trees), nrows = 2)
matrix(c(div_trees, agg_trees), nrow = 2)
matrix(c(div_trees, agg_trees), nrow = 2, byrow = TRUE)
matrix(c(div_trees, agg_trees), ncol = 2)
tries <- matrix(c(div_trees, agg_trees), ncol = 2)
rows(tries)
tries[1,]
tries
div_trees <- lapply(lapply(sequences, infotree), function(x) paste(x,";", sep = ""))
div_trees
agg_trees <- lapply(lapply(sequences, agg_clustering), function(x) paste(x,";", sep = ""))
data <- data.frame(trials, trees, div_trees, agg_trees)
data
View(data)
?data.frame()
data <- data.frame(trees, div_trees, agg_trees, row.names = trials)
?as.data.frame
knitr::opts_chunk$set(echo = TRUE)
# Definition of vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Create a data frame from the vectors
planets_df <- data.frame(name,type, diameter, rotation, rings)
planets_df
data <- data.frame(trees, div_trees, agg_trees)
data
View(data)
View(data)
View(data)
trials <- c(1:10)
divisive <- lapply(lapply(sequences, infotree), function(x) paste(x,";", sep = ""))
agglomerative <- lapply(lapply(sequences, agg_clustering), function(x) paste(x,";", sep = ""))
divisive
agglomerative
as.character(divisive)
data <- data.frame(trees, as.character(divisive), as.character(agglomerative))
View(data)
data <- data.frame(as.character(trees), as.character(divisive), as.character(agglomerative))
View(data)
lapply(data[,c(1,2)], function(x) RobinsonFoulds(read.tree(text = x[1]), read.tree(text = x[2])))
data[,c(1,2)]
data$as.character.trees.
?mapply()
mapply(RobinsonFoulds, data$as.character.trees, data$as.character.divisive.)
mapply(RobinsonFoulds, read.tree(text = data$as.character.trees), read.tree(text = data$as.character.divisive))
mapply(RobinsonFoulds,
lapply(data$as.character.trees., function(x) read.tree(text = x)),
lapply(data$as.character.divisive., function(x) read.tree(text = x)))
lapply(data$as.character.trees., function(x) read.tree)
lapply(data$as.character.trees., function(x) read.tree(text = x))
class(data$as.character.trees.)
lapply(data$as.character.trees., function(x) read.tree(text = as.character(x)))
mapply(RobinsonFoulds,
lapply(data$as.character.trees., function(x) read.tree(text = as.character(x)),
lapply(data$as.character.divisive., function(x) read.tree(text = as.character(x))))
mapply(RobinsonFoulds,
lapply(data$as.character.trees., function(x) read.tree(text = as.character(x))),
lapply(data$as.character.divisive., function(x) read.tree(text = as.character(x))))
div_distance  <- mapply(RobinsonFoulds,
lapply(data$as.character.trees., function(x) read.tree(text = as.character(x))),
lapply(data$as.character.divisive., function(x) read.tree(text = as.character(x))))
agg_distance <- mapply(RobinsonFoulds,
lapply(data$as.character.trees., function(x) read.tree(text = as.character(x))),
lapply(data$as.character.agglomerative., function(x) read.tree(text = as.character(x))))
diagnostics <- c(as.character(div_distance), as.character(agg_distance))
diagnostics <- data.frame(as.character(div_distance), as.character(agg_distance))
View(diagnostics)
ggplot(diagnostics, geom_point())
knitr::opts_chunk$set(echo = TRUE)
require(gapminder)
require(dplyr)
gapminder
library("ggplot2")
library(dplyr)
library(gapminder)
gapminder_1952 <- gapminder %>%
filter(year == 1952)
ggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +
geom_point()
ggplot(gapminder_1952, aes(x=pop, y=lifeExp)) + geom_point()
ggplot(gapminder_1952, aes(x=pop, y=lifeExp,color=continent)) +
geom_point() +
scale_x_log10()
ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = gdpPercap)) +
geom_point() +
scale_x_log10()
summary(diagnostics)
ggplot(diagnostics, aes(x = as.character.div_distance))
ggplot(diagnostics, aes(x = as.character.div_distance.))
+ geom_histogram()
ggplot(diagnostics, aes(x = as.character.div_distance.)) +
geom_histogram()
ggplot(diagnostics, aes(x = as.character.div_distance.)) +
geom_boxplot()
gapminder_1952 <- gapminder %>%
filter(year == 1952)
# Create a boxplot comparing gdpPercap among continents
ggplot(gapminder_1952, aes(x=continent, y=gdpPercap)) +
geom_boxplot() +
scale_y_log10()
mean(diagnostics)
mean(diagnostics$as.character.div_distance.)
mean(as.numeric(diagnostics$as.character.div_distance.))
print("Average RF distance of divisive trees from original: ", mean(as.numeric(diagnostics$as.character.div_distance.)))
print( paste("Average RF distance of divisive trees from original: ", mean(as.numeric(diagnostics$as.character.div_distance.)), sep = ""))
print( paste("Average RF distance of divisive trees from original: ", mean(as.numeric(diagnostics$as.character.div_distance.)), sep = ""))
print( paste("Average RF distance of agglomerative trees from original: ", mean(as.numeric(diagnostics$as.character.agg_distance.)), sep = ""))
diagnostics
as.numeric(diagnostics$as.character.agg_distance.))
as.numeric(diagnostics$as.character.agg_distance.)
diagnostics$as.character.agg_distance.
as.numeric(diagnostics$as.character.agg_distance.)
class(diagnostics$as.character.agg_distance.)
as.character(diagnostics$as.character.agg_distance.)
div_mean <- diagnostics$as.character.div_distance. %>%
as.character() %>%
as.numeric() %>%
mean()
div_mean
agg_mean <- diagnostics$as.character.agg_distance. %>%
as.character() %>%
as.numeric() %>%
mean()
agg_mean
print(paste("Average distance of divisive trees from original: ", div_mean, sep = ""))
print(paste("Average distance of agglomerative trees from original: ", agg_mean, sep = ""))
